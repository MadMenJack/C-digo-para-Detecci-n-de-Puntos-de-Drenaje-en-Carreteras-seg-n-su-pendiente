# -*- coding: utf-8 -*-
"""proyectoO2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fud2ttQMzJhcSWv6bAxaTvOYYErznU_-
"""

import folium
from shapely.geometry import LineString, Point
import numpy as np

# Coordenadas proporcionadas (latitud, longitud)
coordenadas = [
    (18.954998, -103.506209),
    (18.954702, -103.506037),
    (18.954458, -103.505886),
    (18.954268, -103.505821),
    (18.954104, -103.505812),
    (18.953978, -103.505825),
    (18.953632, -103.505980),
]

# Asignar elevaciones simuladas (en metros)
elevaciones = np.linspace(100, 95, len(coordenadas))  # Decrece de 100m a 95m

# Combinar coordenadas con elevaciones
coordenadas_con_elevacion = [(lat, lon, elev) for (lat, lon), elev in zip(coordenadas, elevaciones)]

# Crear la curva como un LineString usando solo latitud y longitud
curva = LineString([(lon, lat) for lat, lon, elev in coordenadas_con_elevacion])

# Calcular puntos de drenaje basados en pendientes
def calcular_drenajes(coordenadas, umbral_pendiente=0.01):
    puntos_drenaje = []
    for i in range(len(coordenadas) - 1):
        lat1, lon1, z1 = coordenadas[i]
        lat2, lon2, z2 = coordenadas[i + 1]
        distancia_horizontal = np.sqrt((lon2 - lon1)**2 + (lat2 - lat1)**2)

        # Calcular pendiente
        pendiente = abs((z2 - z1) / distancia_horizontal) if distancia_horizontal != 0 else 0

        # Mostrar las pendientes calculadas para diagnóstico
        print(f"Segmento {i}: pendiente = {pendiente:.6f}")

        # Agregar puntos de drenaje si la pendiente es menor al umbral
        if pendiente < umbral_pendiente:
            punto_medio = ((lat1 + lat2) / 2, (lon1 + lon2) / 2)
            puntos_drenaje.append(punto_medio)
    return puntos_drenaje

# Calcular puntos de drenaje reales
puntos_drenaje = calcular_drenajes(coordenadas_con_elevacion)

# Si no hay puntos de drenaje, agregar uno manualmente para verificar la visualización
if not puntos_drenaje:
    print("No se generaron puntos de drenaje automáticamente. Agregando un punto manual.")
    puntos_drenaje.append((18.954500, -103.505900))  # Punto ficticio

# Crear un mapa interactivo con Folium centrado en la curva
mapa = folium.Map(location=[18.954458, -103.505886], zoom_start=16)

# Dibujar la curva en el mapa (en azul)
for lat, lon, _ in coordenadas_con_elevacion:
    folium.CircleMarker(
        location=[lat, lon],
        radius=3,
        color="blue",
        fill=True,
        fill_opacity=1,
    ).add_to(mapa)

# Marcar puntos de drenaje (en rojo)
for lat, lon in puntos_drenaje:
    folium.Marker(
        location=[lat, lon],
        popup=f"Drenaje: ({lat:.6f}, {lon:.6f})",
        icon=folium.Icon(color="red", icon="info-sign"),
    ).add_to(mapa)

# Guardar el archivo HTML
mapa.save("mapa_drenajes_curva.html")
print("Mapa guardado como 'mapa_drenajes_curva.html'")